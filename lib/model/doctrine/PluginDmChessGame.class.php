<?php

/**
 * PluginDmChessGame
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class PluginDmChessGame extends BaseDmChessGame
{
  protected
  $board;
  
  public function getCopy()
  {
    if($this->hasCache('virtual_copy'))
    {
      return $this->getCache('virtual_copy');
    }
    
    $playerTable  = dmDb::table('DmChessPlayer');
    $pieceTable   = dmDb::table('DmChessPiece');
    
    $virtualCopy = $this->getTable()->create($this->getData());
    
    foreach($this->get('Players') as $player)
    {
      $_player = $playerTable->create();
      $_player->setData($player->getData());
      $virtualCopy->get('Players')->add($_player);
      
      foreach($player->get('Pieces') as $piece)
      {
        $_piece = $piece->getTable()->create();
        $_piece->setData($piece->getData());
        $_player->get('Pieces')->add($_piece);
      }
    }
    
    return $this->setCache('virtual_copy', $virtualCopy);
  }
  
  public function movePieceByHumanPos($from, $to)
  {
    return $this->getBoard()->getPieceByKey($this->getBoard()->humanPosToKey($from))
    ->moveToSquareKey($this->getBoard()->humanPosToKey($to));
  }
  
  public function clearCache($cacheKey = null)
  {
    parent::clearCache($cacheKey);
    
    if(null === $cacheKey)
    {
      if($virtualCopy = $this->getCache('virtual_copy'))
      {
        $virtualCopy->free(true);
      }
      
      $this->getBoard()->clearCache();
      
      foreach($this->get('Players') as $player)
      {
        $player->clearCache();
      }
    }
    
    return $this;
  }
  
  public function getBoard()
  {
    if(null === $this->board)
    {
      if($sc = $this->getTable()->getServiceContainer())
      {
        $this->board = $sc->setParameter('dm_chess.game', $this)->getService('dm_chess_board');
      }
      else
      {
        throw new dmException('Need a service container');
      }
    }
    
    return $this->board;
  }
  
  public function getPlayerByColor($color)
  {
    foreach($this->get('Players') as $player)
    {
      if ($color === $player->get('color'))
      {
        return $player;
      }
    }
  }
  
  public function getPieces()
  {
    $pieces = array();
    foreach($this->get('Players') as $player)
    {
      $pieces = array_merge($pieces, $player->get('Pieces')->getData());
    }
    
    return $pieces;
  }
  
  public function getCurrentPlayer()
  {
    foreach($this->get('Players') as $player)
    {
      if ($player->isMyTurn())
      {
        return $player;
      }
    }
  }
  
  public function getWinner()
  {
    foreach($this->get('Players') as $player)
    {
      if ($player->isWinner)
      {
        return $player;
      }
    }
  }
  
  public function addTurn()
  {
    $this->set('turns', $this->get('turns')+1);
    return $this;
  }
  
  public function __toString()
  {
    return '#'.$this->get('id'). 'turn '.$this->get('turns');
  }

  public function preInsert($event)
  {
    parent::preInsert($event);
    
    $this->code = dmString::random(8);
  }
  
  public function start()
  {
    $this->isStarted = true;

    $this->getEventDispatcher()->notify(new dmChessEvent($this, 'dm.chess.game_start'));
    
    return $this;
  }
}